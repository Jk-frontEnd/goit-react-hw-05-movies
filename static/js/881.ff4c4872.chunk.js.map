{"version":3,"file":"static/js/881.ff4c4872.chunk.js","mappings":"2KACA,SAAgB,UAAY,0BAA0B,KAAO,qBAAqB,MAAQ,sBAAsB,IAAM,oBAAoB,KAAO,qBAAqB,KAAO,sB,qBCG7K,MAmGA,EAnGeA,KACb,MAAOC,EAAaC,IAAkBC,EAAAA,EAAAA,UAASC,eAAeC,QAAQ,gBAAkB,KACjFC,EAAeC,IAAaJ,EAAAA,EAAAA,UAAS,KACrCK,IAAWL,EAAAA,EAAAA,UAAS,qCACpBM,EAASC,IAAcP,EAAAA,EAAAA,WAAS,IAChCQ,EAAOC,IAAYT,EAAAA,EAAAA,UAAS,MAE/BU,GAAoBC,EAAAA,EAAAA,cAAY,KACpCV,eAAeW,QAAQ,cAAed,GACtCG,eAAeW,QAAQ,cAAeC,KAAKC,UAAUX,GAAe,GACnE,CAACL,EAAaK,IAEXY,GAAqBJ,EAAAA,EAAAA,cAAYK,UACrC,MAAMC,EAAY,mDAAAC,OAAsDC,EAAQ,aAAAD,OAAYb,GAE5F,IACEE,GAAW,GACX,MAAMa,QAAiBC,MAAMJ,GACvBK,QAAaF,EAASE,OAExBF,EAASG,IACXnB,EAAUkB,EAAKE,SACff,EAAS,QAETA,EAAS,kCACTL,EAAU,IASd,CAPE,MAAOI,GACPiB,QAAQjB,MAAM,iCAAkCA,GAChDC,EAAS,kCACTL,EAAU,GACZ,CAAC,QACCG,GAAW,GACXG,GACF,IACC,CAACL,EAASD,EAAWG,EAAYE,EAAUC,KAe5CgB,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAc1B,eAAeC,QAAQ,eAE3C,GAAIyB,EACF,IACE,MAAMC,EAAef,KAAKgB,MAAMF,GAChCvB,EAAUwB,EAIZ,CAHE,MAAOpB,GACPiB,QAAQjB,MAAM,0CAA2CA,GACzDJ,EAAU,GACZ,MAEAqB,QAAQjB,MAAM,4CACdJ,EAAU,GACZ,GACC,IAOH,OACE0B,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,UAAiBC,SAAA,EAC/BH,EAAAA,EAAAA,MAAA,QAAMC,UAAWC,EAAAA,KAAaE,SApCflB,UAEnB,GADAmB,EAAEC,iBACyB,KAAvBtC,EAAYuC,OACd,UACQtB,EAAmBjB,EAG3B,CAFE,MAAOU,GACPiB,QAAQjB,MAAM,uBAAwBA,EACxC,CAEFE,GAAmB,EA2BsCuB,SAAA,EACnDK,EAAAA,EAAAA,KAAA,SAAOP,UAAWC,EAAAA,MAAcO,SARhBJ,IACpBpC,EAAeoC,EAAEK,OAAOC,MAAM,EAO8BC,KAAK,OAAOD,MAAO3C,KAC3EwC,EAAAA,EAAAA,KAAA,UAAQP,UAAWC,EAAAA,IAAYU,KAAK,SAAQT,SAAC,cAI9C3B,IAAWgC,EAAAA,EAAAA,KAAA,KAAAL,SAAG,eACdzB,IAASsB,EAAAA,EAAAA,MAAA,KAAAG,SAAA,CAAG,UAAQzB,KACpBL,EAAcwC,OAAS,IACtBL,EAAAA,EAAAA,KAAA,MAAIP,UAAWC,EAAAA,cAAqBC,SACjC9B,EAAcyC,KAAKC,IAClBP,EAAAA,EAAAA,KAAA,MAAIP,UAAWC,EAAAA,KAAYC,SACxBY,EAAaC,iBACZR,EAAAA,EAAAA,KAACS,EAAAA,GAAI,CAAChB,UAAWC,EAAAA,KAAagB,GAAE,WAAA9B,OAAa2B,EAAaI,IAAKhB,SAC5DY,EAAaC,kBAHaD,EAAaI,UAUhD,C","sources":["webpack://react-homework-template/./src/pages/Movies/Movies.module.css?82ee","pages/Movies/Movies.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"MoviesBox\":\"Movies_MoviesBox__jPCE3\",\"form\":\"Movies_form__4ow+Z\",\"input\":\"Movies_input__KrUqs\",\"btn\":\"Movies_btn__TlfBQ\",\"link\":\"Movies_link__MzAfU\",\"item\":\"Movies_item__Ba4aJ\"};","import React, { useState, useEffect, useCallback } from 'react';\nimport styles from './Movies.module.css';\nimport { Link } from 'react-router-dom';\n\nconst Movies = () => {\n  const [searchQuery, setSearchQuery] = useState(sessionStorage.getItem('searchQuery') || '');\n  const [fittingMovies, setMovies] = useState([]);\n  const [api_key] = useState('6ec0ba8fa041ffdfd513a6b00a854a64');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  \nconst saveFittingMovies = useCallback(() => {\n  sessionStorage.setItem('searchQuery', searchQuery);\n  sessionStorage.setItem('foundMovies', JSON.stringify(fittingMovies));\n}, [searchQuery, fittingMovies]);\n\nconst fetchSearchResults = useCallback(async (newQuery) => {\n  const apiUrlSearch = `https://api.themoviedb.org/3/search/movie?query=${newQuery}&api_key=${api_key}`;\n\n  try {\n    setLoading(true);\n    const response = await fetch(apiUrlSearch);\n    const json = await response.json();\n\n    if (response.ok) {\n      setMovies(json.results);\n      setError(null);\n    } else {\n      setError('Failed to fetch search results');\n      setMovies([]);\n    }\n  } catch (error) {\n    console.error('Error fetching search results:', error);\n    setError('Failed to fetch search results');\n    setMovies([]);\n  } finally {\n    setLoading(false);\n    saveFittingMovies();\n  }\n}, [api_key, setMovies, setLoading, setError, saveFittingMovies]);\n\n\nconst handleSubmit = async (e) => {\n  e.preventDefault();\n  if (searchQuery.trim() !== '') {\n    try {\n      await fetchSearchResults(searchQuery);\n    } catch (error) {\n      console.error('Error during search:', error);\n    }\n  }\n  saveFittingMovies();\n};\n\n  useEffect(() => {\n    const savedMovies = sessionStorage.getItem('foundMovies');\n    \n    if (savedMovies) {\n      try {\n        const parsedMovies = JSON.parse(savedMovies);\n        setMovies(parsedMovies);\n      } catch (error) {\n        console.error('Error parsing JSON from sessionStorage:', error);\n        setMovies([]);\n      }\n    } else {\n      console.error('No saved movies found in sessionStorage.');\n      setMovies([]);\n    }\n  }, []);\n  \n  const handleChange = (e) => {\n    setSearchQuery(e.target.value);\n  };\n  \n  \n  return (\n    <div className={styles.MoviesBox}>\n      <form className={styles.form} onSubmit={handleSubmit}>\n        <input className={styles.input} onChange={handleChange} type=\"text\" value={searchQuery} />\n        <button className={styles.btn} type=\"submit\">\n          Search\n        </button>\n      </form>\n      {loading && <p>Loading...</p>}\n      {error && <p>Error: {error}</p>}\n      {fittingMovies.length > 0 && (\n        <ul className={styles.searchResults}>\n          {fittingMovies.map((fittingMovie) => (\n            <li className={styles.item} key={fittingMovie.id}>\n              {fittingMovie.original_title && (\n                <Link className={styles.link} to={`/movies/${fittingMovie.id}`}>\n                  {fittingMovie.original_title}\n                </Link>\n              )}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Movies;"],"names":["Movies","searchQuery","setSearchQuery","useState","sessionStorage","getItem","fittingMovies","setMovies","api_key","loading","setLoading","error","setError","saveFittingMovies","useCallback","setItem","JSON","stringify","fetchSearchResults","async","apiUrlSearch","concat","newQuery","response","fetch","json","ok","results","console","useEffect","savedMovies","parsedMovies","parse","_jsxs","className","styles","children","onSubmit","e","preventDefault","trim","_jsx","onChange","target","value","type","length","map","fittingMovie","original_title","Link","to","id"],"sourceRoot":""}